# -*- coding: utf-8 -*-
"""Lab 5 - Best First Search

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ouWSD8RqwBuc88hyAe4IgOCpAONG4p1v
"""

from queue import PriorityQueue

def best_first_search(start, goal, n):
    visited = [False] * n
    pq = PriorityQueue()
    pq.put((0, start))
    visited[start] = True
     
    while pq.empty() == False:
        node = pq.get()[1]
        
        # print the path having lowest cost
        print("Node {0} has been visited.".format(node))
        if node == goal:
            break
 
        for node, heuristic in graph[node]:
            if visited[node] == False:
                visited[node] = True
                pq.put((heuristic, node))
    print()

def addedge(x, y, heuristic):
    graph[x].append((y, heuristic))
    graph[y].append((x, heuristic))

# number of nodes
n = 9

# create nodes in the graph
graph = [[] for i in range(n)]

# Add edges along with heuristic in the graph
addedge(0, 1, 3)
addedge(0, 2, 8)
addedge(0, 3, 7)
addedge(1, 4, 9)
addedge(1, 5, 8)
addedge(2, 6, 12)
addedge(2, 7, 14)
addedge(3, 8, 7)

source = 0
target = 9
best_first_search(source, target, n)
